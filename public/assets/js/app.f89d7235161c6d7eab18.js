!function(e){function t(t){for(var n,i,s=t[0],c=t[1],o=t[2],m=0,p=[];m<s.length;m++)i=s[m],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&p.push(r[i][0]),r[i]=0;for(n in c)Object.prototype.hasOwnProperty.call(c,n)&&(e[n]=c[n]);for(u&&u(t);p.length;)p.shift()();return l.push.apply(l,o||[]),a()}function a(){for(var e,t=0;t<l.length;t++){for(var a=l[t],n=!0,s=1;s<a.length;s++){var c=a[s];0!==r[c]&&(n=!1)}n&&(l.splice(t--,1),e=i(i.s=a[0]))}return e}var n={},r={0:0},l=[];function i(t){if(n[t])return n[t].exports;var a=n[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=n,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(a,n,function(t){return e[t]}.bind(null,n));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/";var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var o=0;o<s.length;o++)t(s[o]);var u=c;l.push([66,1]),a()}({40:function(e,t,a){var n=a(28),r=a(41);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var l={insert:"head",singleton:!1},i=(n(r,l),r.locals?r.locals:{});e.exports=i},41:function(e,t,a){},66:function(e,t,a){"use strict";a.r(t);a(40);var n=a(0),r=a.n(n),l=a(22),i=a.n(l),s=a(5),c=a(11),o=a(18),u=a(36),m=a(2),p=a.n(m);function d(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function f(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?d(Object(a),!0).forEach((function(t){p()(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):d(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var g={dropDownShow:!1,sideBarShow:!1,isLoaded:!0,toggleMenu:!1},h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:g,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"IS_DROP_DOWNS_SHOW":return f({},e,{dropDownShow:!t.payload});case"IS_TOGGLE_SIDEBAR":return f({},e,{sideBarShow:!t.payload});case"IS_LOADED":return f({},e,{isLoaded:!1});case"NEW_PAGE_OPTIONS":return{options:t.payload};default:return e}};function E(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?E(Object(a),!0).forEach((function(t){p()(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):E(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var v={loading:!1,page:{data:[{id:0,title:"",body:""}],length:0}},y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:v,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"FETCH_PAGE_START":return b({},e,{loading:!0});case"FETCH_PAGE":return b({},e,{loading:!1,page:t.payload});default:return e}};function O(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function N(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?O(Object(a),!0).forEach((function(t){p()(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):O(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var w={loading:!1,pages:[{_id:"",id:"",title:"",alias:"",isFolder:!1,parent:"",parentName:"",path:"",isActive:!0,body:"",metaDescription:"",metaKeywords:"",metaTitle:"",hasChild:!1}]},S=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:w,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"FETCH_MENU_START":return N({},e,{loading:!0});case"FETCH_MENU":return N({},e,{loading:!1,menu:t.payload});case"FETCH_MENU_ITEMS":return N({},e,{pages:t.payload});case"UPDATE_MENU":return N({},e,{toggler:t.payload});default:return e}},k=Object(o.c)({fetchMenu:S,commonReducer:h,fetchPages:y}),j=a(19),P=a(6),I=a.n(P),T=a(7),D=a.n(T),C=a(8),_=a.n(C),M=a(9),x=a.n(M),F=a(3),A=a.n(F),B=a(10),U=a.n(B),L=a(1),H=a.n(L),R=function(e,t,a,n){var r=new XMLHttpRequest;switch(e){case"GET":return new Promise((function(a,l){if(r.open(e,t,!0),n)for(var i=0,s=Object.entries(n);i<s.length;i++){var c=H()(s[i],2),o=c[0],u=c[1];r.setRequestHeader(o,u)}r.onload=function(){4===r.readyState&&(200===r.status?a(r.responseText):l(r.statusText))},r.onerror=function(){l(r.statusText)},r.send()})).then((function(e){return JSON.parse(e)}));case"POST":case"PUT":return new Promise((function(l,i){if(r.open(e,t),n)for(var s=0,c=Object.entries(n);s<c.length;s++){var o=H()(c[s],2),u=o[0],m=o[1];r.setRequestHeader(u,m)}else!1!==n&&r.setRequestHeader("Content-type","application/json; charset=utf-8");r.onerror=function(){i(r.statusText)},r.onload=function(){l(r)},a instanceof FormData?r.send(a):r.send(JSON.stringify(a))})).then((function(e){return e}));case"DELETE":return new Promise((function(a,n){r.open(e,t),r.onerror=function(){n(r.statusText)},r.onload=function(){a(r)},r.send(r)})).then((function(e){return e}));default:return new Promise((function(a,n){r.open(e,t,!0),r.onload=function(e){4===r.readyState&&(200===r.status?a(r.responseText):n(r.statusText))},r.onerror=function(e){n(r.statusText)},r.send()})).then((function(e){return JSON.parse(e)}))}},G=function(){var e=Object(j.f)(),t=Object(n.useState)(localStorage.getItem("jwt")),a=H()(t,2),r=a[0],l=a[1],i=Object(n.useState)(null),s=H()(i,2),c=s[0],o=s[1],u=Object(n.useCallback)((function(){if(o(!1),l(null),"/admin/login"!=e.location.pathname)return e.push("/admin/login")}),[]),m=Object(n.useCallback)((function(t){localStorage.setItem("jwt",t.token),localStorage.setItem("user",JSON.stringify(t.user)),l(r),e.push("/admin")}),[]),p=Object(n.useCallback)((function(){return localStorage.removeItem("jwt"),localStorage.removeItem("user"),o(null),l(null),e.push("/admin/login")}),[]);return Object(n.useEffect)((function(){var t=localStorage.getItem("jwt");t?"/admin/login"!=e.location.pathname&&R("GET","/api/user/",null,{Authorization:t}).then((function(e){e||"ok"==e.auth?o(!0):u()})).catch((function(e){return u()})):u()})),{token:r,isAuth:c,successLogin:m,logOut:p,getUserInfo:function(){return JSON.parse(localStorage.getItem("user"))}}},J=function(e){var t=G().logOut;return r.a.createElement(r.a.Fragment,null,r.a.createElement("li",{onClick:e.toggleMenu},r.a.createElement(s.b,{activeClassName:"active_",to:"/admin/user",className:"dropdown-item"},r.a.createElement("i",{className:"fa fa-user fa-lg"}),"Профиль")),r.a.createElement("li",{onClick:e.toggleMenu},r.a.createElement("a",{href:"",onClick:function(e){e.preventDefault(),t()},className:"dropdown-item"},r.a.createElement("i",{className:"fa fa-sign-out fa-lg"}),"Выход")))},q=function(e){var t=["dropdown"],a=["dropdown-menu","settings-menu","dropdown-menu-right"];return e.show&&(t.push("show"),a.push("show")),r.a.createElement("li",{className:t.join(" ")},r.a.createElement("a",{href:"",className:"app-nav__item",onClick:e.toggleMenu},r.a.createElement("i",{className:"fa fa-user fa-lg"})),r.a.createElement("ul",{className:a.join(" ")},r.a.createElement(J,{toggleMenu:e.toggleMenu})))},K=Object(c.b)((function(e){return{dropDownShow:e.commonReducer.dropDownShow}}),(function(e){return{toggleDropDown:function(t){return e(function(e){return{type:"IS_DROP_DOWNS_SHOW",payload:e}}(t))}}}))((function(e){return r.a.createElement("header",{className:"app-header"},r.a.createElement(s.b,{className:"app-header__logo",to:"/admin"},"Vali"),r.a.createElement("a",{className:"app-sidebar__toggle",href:"#",onClick:e.toggleSide}),r.a.createElement("ul",{className:"app-nav"},r.a.createElement(q,{toggleMenu:function(t){t.preventDefault(),e.toggleDropDown(e.dropDownShow)},show:e.dropDownShow})))})),W=function(){var e=Object(n.useState)(null),t=H()(e,2),a=t[0],l=t[1],i=G().getUserInfo;return Object(n.useEffect)((function(){var e=i();l(e)}),[]),r.a.createElement("div",{className:"app-sidebar__user"},r.a.createElement("img",{className:"app-sidebar__user-avatar",src:"https://s3.amazonaws.com/uifaces/faces/twitter/jsa/48.jpg",alt:""}),r.a.createElement("div",null,r.a.createElement("p",{className:"app-sidebar__user-name"},a&&a.profile.name),r.a.createElement("p",{className:"app-sidebar__user-designation"},a&&a.profile.role)))},V=a(24),X=a.n(V),z=function(){return r.a.createElement("div",{className:"overlay preloader"},r.a.createElement("div",{className:"m-loader mr-4"},r.a.createElement("svg",{className:"m-circular",viewBox:"25 25 50 50"},r.a.createElement("circle",{className:"path",cx:"50",cy:"50",r:"10",fill:"none",strokeWidth:"2",strokeMiterlimit:"10"}))))},Q=function e(t){var a=Object(n.useState)(!1),l=H()(a,2),i=l[0],c=l[1],o=null,u="treeview";return i&&!t.collapsed?u+=" is-expanded":u="treeview",t.page.isFolder&&(o=r.a.createElement("li",{className:u},r.a.createElement("span",{className:"tree-arrow"},r.a.createElement(s.b,{className:"treeview-item",to:"/admin/page/"+t.page.id},r.a.createElement("i",{className:"icon fa fa-folder-o"}),t.page.title),t.page.hasChild&&r.a.createElement("i",{className:"treeview-indicator fa fa-angle-right",onClick:function(e){c(!i),t.getPageMenu(e)}.bind(void 0,t.page.id)})),r.a.createElement("ul",{className:"treeview-menu "},function(e){var t=[];for(var a in e)t.push(e[a]);return t}(t.page.items).map((function(a){return r.a.createElement(e,{page:a,key:a.id,getPageMenu:t.getPageMenu})}))))),o||r.a.createElement("li",{key:t.page.id},r.a.createElement(s.b,{className:"treeview-item",to:"/admin/update/"+t.page.id},r.a.createElement("i",{className:"icon fa fa-file-text-o"}),t.page.title))},Y=function(e){return function(t){R("GET","/api/parentPage/".concat(e),null).then((function(e){t(ee(e.data))}))}},Z=function(e){return function(t){t(te(e))}},$=function(e){return{type:"FETCH_MENU",payload:e}},ee=function(e){return{type:"FETCH_MENU_ITEMS",payload:e}},te=function(e){return{type:"UPDATE_MENU",payload:e}},ae=function(){return{type:"FETCH_MENU_START"}},ne=function(e){function t(e){var a;return I()(this,t),a=_()(this,x()(t).call(this,e)),p()(A()(a),"filterOb",(function(e,t,n){return e.map((function(e){e.id!=e.parent&&(e.isFolder&&void 0!==e.items?a.filterOb(e.items,t,n):e.id==n[0].parent&&(e.items=n))})),e})),p()(A()(a),"getPageMenu",(function(e){a.state.memory.find((function(t){return t==e}))||(a.setState({memory:[].concat(X()(a.state.memory),[e])}),setTimeout((function(){a.props.fetchMenuItemsById(e)}),0))})),a.state={memory:[],arr:null,unClicked:!1,showMenu:!1},a.menuToggler=a.menuToggler.bind(A()(a)),a}return U()(t,e),D()(t,[{key:"componentDidMount",value:function(){this.props.fetchMenuItemsById(0),this.props.fetchMenu()}},{key:"componentDidUpdate",value:function(e){var t=this;if(JSON.stringify(e.menu.pages)!==JSON.stringify(this.props.menu.pages)&&this.props.menu.pages[0]){var a=this.props.menu.pages[0].id,n=this.props.menu.pages.filter((function(e){return e.parent===a}));return this.props.update&&(this.setState({arr:n,memory:[],unClicked:!0}),this.props.updateMenu(!1)),null==this.state.arr&&setTimeout((function(){t.setState({arr:n})}),0),setTimeout((function(){t.setState({arr:t.filterOb(t.state.arr,n[0].parent,n),unClicked:!1})}),0),!0}return!1}},{key:"menuToggler",value:function(){this.setState({showMenu:!this.state.showMenu})}},{key:"render",value:function(){var e=this,t=["treeview"];return this.state.showMenu&&t.push("is-expanded"),r.a.createElement("ul",{className:"app-menu"},!this.props.loading&&this.props.menu.menu?this.props.menu.menu.map((function(a){return a.hasPages?r.a.createElement("li",{className:t.join(" "),key:a.id},r.a.createElement(s.b,{to:a.alias,activeClassName:"active",className:"app-menu__item"},r.a.createElement("i",{className:"app-menu__icon fa ".concat(a.class)}),r.a.createElement("span",{className:"app-menu__label"},a.title),r.a.createElement("i",{className:"treeview-indicator fa fa-angle-right",onClick:e.menuToggler.bind(e)})),r.a.createElement("ul",{className:"treeview-menu",style:{paddingLeft:"0px"}},e.state.showMenu&&e.state.arr[0].alias&&!e.state.unClicked?e.state.arr.map((function(t){return r.a.createElement(Q,{page:t,collapsed:e.state.unClicked,key:t.id,getPageMenu:e.getPageMenu})})):null)):r.a.createElement("li",{key:a.id},r.a.createElement(s.b,{to:a.alias,exact:!0,activeClassName:"active",className:"app-menu__item"},r.a.createElement("i",{className:"app-menu__icon fa ".concat(a.class)}),r.a.createElement("span",{className:"app-menu__label"},a.title)))})):r.a.createElement(z,null))}}]),t}(n.Component),re=Object(c.b)((function(e){return{loading:e.fetchMenu.loading,pages:e.fetchMenuItemsById,menu:e.fetchMenu,update:e.fetchMenu.toggler}}),(function(e){return{fetchMenuItemsById:function(t){return e(Y(t))},fetchMenu:function(){return e((function(e){e(ae()),new Promise((function(e,t){setTimeout((function(){return e()}),100)})).then((function(){R("GET","/api/menu",null).then((function(t){return e($(t))}))}))}))},updateMenu:function(t){return e(Z(t))}}}))(ne),le=function(e){return r.a.createElement("aside",{className:"app-sidebar"},r.a.createElement(W,null),r.a.createElement(re,null))},ie=r.a.createContext(null),se=function(e){var t=e.children,a=r.a.useState(!1),n=H()(a,2),l=n[0],i=n[1],s=r.a.useState(!1),c=H()(s,2),o=c[0],u=c[1],m=r.a.useState(null),p=H()(m,2),d={alert:{isShow:l,toggleAlert:i},delete:{isDelete:o,deletePage:u},id:{id:p[0],setId:p[1]}};return r.a.createElement(ie.Provider,{value:d},t)},ce=function(){var e=r.a.useContext(ie),t=["alert-modal-background"];e.alert.isShow?t.push("active-modal"):t=["alert-modal-background"];var a=function(){e.alert.toggleAlert(!1)};return r.a.createElement("div",{className:t.join(" "),onClick:a},r.a.createElement("div",{className:"alert-modal",onClick:function(e){return e.stopPropagation()}},r.a.createElement("i",{className:"fa fa-times close",onClick:a}),r.a.createElement("div",{className:"alert-body"},r.a.createElement("h2",{className:"message"},"Вы уверены ?")),r.a.createElement("div",{className:"btn-group"},r.a.createElement("button",{className:"btn btn-primary",onClick:function(){e.delete.deletePage(!0)}},"Продолжить"),r.a.createElement("button",{className:"btn btn-danger",onClick:function(){e.alert.toggleAlert(!1)}},"Отменить"))))},oe=function(e){function t(e){var a;return I()(this,t),(a=_()(this,x()(t).call(this,e))).toogleSidebar=a.toogleSidebar.bind(A()(a)),a}return U()(t,e),D()(t,[{key:"toogleSidebar",value:function(e){e.preventDefault(),this.props.toggleSideBarAction(this.props.sideBarShow)}},{key:"render",value:function(){return r.a.createElement("div",{id:"Layout",className:"app sidebar-mini rtl pace-done ".concat(this.props.sideBarShow?"sidenav-toggled":null)},r.a.createElement(K,{toggleSide:this.toogleSidebar}),r.a.createElement(le,{isAuth:this.props.isAuth}),r.a.createElement(se,null,r.a.createElement("main",{className:"app-content"},this.props.children),r.a.createElement(ce,null)))}}]),t}(r.a.Component),ue=Object(c.b)((function(e){return{sideBarShow:e.commonReducer.sideBarShow,loading:e.commonReducer.isLoaded}}),(function(e){return{toggleSideBarAction:function(t){return e(function(e){return{type:"IS_TOGGLE_SIDEBAR",payload:e}}(t))},load:function(t){return e(function(e){return{type:"IS_LOADED",payload:e}}(t))}}}))(oe),me=function(e){var t,a;return e.pages&&(a=e.pages.filter((function(t){return t.id==e.match.params.ids}))),e.pages&&e.pages.length>=1&&e.pages[0]&&(t=a&&a[0]&&"null"==a[0].path?a[0].isFolder?"/ ".concat(e.title," / ").concat(a[0].title," "):"/ ".concat(e.title," "):a&&a[0]&&a[0].isFolder?"/ ".concat(e.title," / ").concat(a[0].path," / ").concat(a[0].title):"/ ".concat(e.title," / ").concat(e.pages[0].path," / ").concat(e.pages[0].title)),e.path&&(t=e.path.replace(/\//g," / ")),r.a.createElement("ul",{className:"app-breadcrumb breadcrumb"},r.a.createElement("li",{className:"breadcrumb-item"},r.a.createElement("i",{className:"fa fa-home fa-lg"})),e.path?"null"!=e.path?r.a.createElement("li",{className:"breadcrumb-item"},"/ Страницы  / ".concat(t," / ").concat(e.title)):r.a.createElement("li",{className:"breadcrumb-item"},"/ Страницы / ".concat(e.title)):e.pages&&e.pages.length>=1&&r.a.createElement("li",{className:"breadcrumb-item"},t))},pe=function(e){function t(e){return I()(this,t),_()(this,x()(t).call(this,e))}return U()(t,e),D()(t,[{key:"render",value:function(){return r.a.createElement("div",{className:"app-title"},r.a.createElement("div",null,r.a.createElement("h1",null,r.a.createElement("i",{style:{marginRight:"20px"},className:"fa ".concat(this.props.classN)}),r.a.createElement("span",null,this.props.title))),r.a.createElement(me,this.props))}}]),t}(n.Component),de=function(e){function t(e){return I()(this,t),_()(this,x()(t).call(this,e))}return U()(t,e),D()(t,[{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(pe,{title:"Панель",classN:"fa-dashboard"}),r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-12"},r.a.createElement("p",null,"Main"))))}}]),t}(n.Component),fe=a(25),ge=a.n(fe),he=a(20),Ee=a.n(he),be=a(26),ve=a.n(be),ye=function(e){return r.a.createElement("div",{className:"col-sm-12 col-md-12"},r.a.createElement("div",{className:"dataTables_filter"},r.a.createElement("label",null,"Поиск:",r.a.createElement("input",{type:"search",onChange:e.handleChange,className:"form-control form-control-sm"}))))},Oe=function(e){var t=Object(n.useContext)(ie);return t.delete.isDelete&&t.id.id===e.item.id&&(e.deletePage(e.item.id),t.delete.deletePage(!1),t.alert.toggleAlert(!1),t.id.setId(null)),Object(n.useMemo)((function(){return e.item&&null!=e.item?r.a.createElement("div",{style:{marginBottom:"10px"},className:"col-md-12 row tile-title-w-btn text-black bg-light page-item"},e.item.isFolder?r.a.createElement(s.b,{to:"/admin/page/"+e.item.id},r.a.createElement("i",{className:"icon fa fa-folder-o"}),r.a.createElement("span",null,e.item.id)):r.a.createElement(s.b,{to:"/admin/update/"+e.item.id},r.a.createElement("i",{className:"icon fa fa-file-text-o"}),r.a.createElement("span",null,e.item.id)),r.a.createElement("div",{className:"col-md-4 title-wrap"},e.item.isFolder?r.a.createElement(s.b,{to:"/admin/page/"+e.item.id},e.item.title):r.a.createElement(s.b,{to:"/admin/update/"+e.item.id},e.item.title)),r.a.createElement("div",{className:"col-md-4 title-alias"},e.item.alias?r.a.createElement(s.b,{to:e.item.alias},e.item.alias):null),r.a.createElement("div",{className:"col-md-3"},r.a.createElement("div",{className:"btn-group pull-right"},r.a.createElement(s.b,{className:"btn btn-primary",to:"/admin/update/"+e.item.id},r.a.createElement("i",{className:"fa fa-lg fa-edit"})),r.a.createElement("button",{onClick:function(a){var n;a.preventDefault,n=e.item.id,t.alert.toggleAlert(!0),t.id.setId(n)},className:"btn btn-danger"},r.a.createElement("i",{className:"fa fa-lg fa-trash"}))))):null}),[])},Ne=function(e){return{type:"FETCH_PAGE",payload:e}},we=function(){return{type:"FETCH_PAGE_START"}},Se=function(){return r.a.createElement("div",{className:"pageLoadPreloader"},r.a.createElement("div",{className:"overlay preloader"},r.a.createElement("div",{className:"m-loader mr-4"},r.a.createElement("svg",{className:"m-circular",viewBox:"25 25 50 50"},r.a.createElement("circle",{className:"path",cx:"50",cy:"50",r:"10",fill:"none",strokeWidth:"2",strokeMiterlimit:"10"})))))},ke=function(e){function t(e){var a;return I()(this,t),a=_()(this,x()(t).call(this,e)),p()(A()(a),"handleChange",(function(e){var t=e.target.value;setTimeout((function(){""==t&&t==t||a.searchPages(t),""==t&&a.setState({search:null})}),0)})),p()(A()(a),"searchPages",(function(e){a.state.arr&&a.state.arr[0]._id==a.props.pages[0]._id||a.setState({arr:a.props.pages,limit:a.props.pagesLength}),new Promise((function(t){var n=a.state.arr.filter((function(t){return t.title.search(new RegExp(e,"i"))>=0}));setTimeout((function(){t(n)}),0)})).then((function(e){a.setState({search:e})}))})),p()(A()(a),"onClick",(function(){var e;e=a.props.pages&&a.props.pages.length>=1&&a.props.pages?a.props.pages[0]&&"null"!=a.props.pages[0].path?{id:a.props.match.params.ids,path:"".concat(a.props.pages[0].path," / ").concat(a.props.pages[0].title),parentName:a.props.pages[0].title}:a.props.pages[0]&&0==a.props.match.params.ids?{id:a.props.match.params.ids,path:"null",parentName:"null"}:{id:a.props.match.params.ids,path:"".concat(a.props.pages[0].title),parentName:a.props.pages[0].title}:{id:a.props.match.params.ids,path:"null",parentName:"null"},localStorage.setItem("options",JSON.stringify(e))})),p()(A()(a),"deletePage",function(){var e=ve()(Ee.a.mark((function e(t){return Ee.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,R("DELETE","/api/page/".concat(t),null).then((function(e){return e.status}));case 2:200==e.sent&&(a.props.fetchParentPageById(a.props.match.params.ids),setTimeout((function(){a.setState({arr:a.props.pages}),setTimeout((function(){a.props.fetchMenuItemsById(0),a.props.updateMenu(!0)}),0)}),0));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),a.state={search:null,arr:null,pageLimit:15},a.handleChange=a.handleChange.bind(A()(a)),a.onClick=a.onClick.bind(A()(a)),a.handleScroll=a.handleScroll.bind(A()(a)),a}return U()(t,e),D()(t,[{key:"componentDidMount",value:function(){window.addEventListener("scroll",this.handleScroll),this.props.fetchParentPageById(this.props.match.params.ids)}},{key:"componentDidUpdate",value:function(e){return e.match.params.ids!=this.props.match.params.ids&&(this.props.pages.length?this.props.fetchParentPageById(this.props.match.params.ids):this.props.fetchParentPageById(0),this.setState({arr:this.props.pages}),!0)}},{key:"handleScroll",value:function(){var e=document.documentElement&&document.documentElement.scrollTop||document.body.scrollTop,t=document.documentElement&&document.documentElement.scrollHeight||document.body.scrollHeight,a=document.documentElement.clientHeight||window.innerHeight;if(Math.ceil(e+a+50)>=t&&!this.props.loading){var n=this.state.pageLimit,r=this.props.pagesLength;(n<r||n==r)&&(this.setState({pageLimit:n+15}),this.props.fetchParentPageById(this.props.match.params.ids,n+15))}}},{key:"componentWillUnmount",value:function(){window.removeEventListener("scroll",this.handleScroll)}},{key:"render",value:function(){var e,t=this;if(this.props.pages){var a=this.props.pages[0].id;e=this.props.pages.filter((function(e){return e.parent===a}))}return r.a.createElement(r.a.Fragment,null,r.a.createElement(pe,ge()({title:"Страницы",classN:"fa-file-text"},this.props)),r.a.createElement("div",{className:"row f",onScroll:this.handleScroll},r.a.createElement("div",{className:"col-md-12"},r.a.createElement("div",{className:"tile row"},r.a.createElement("div",{className:"col-md-12 line-head"},r.a.createElement(s.b,{to:"/admin/create",onClick:this.onClick,className:"btn btn-primary icon-btn"},r.a.createElement("i",{className:"fa fa-plus"}),"Добавить страницу")),r.a.createElement("div",{style:{paddingTop:"10px"},className:"tile-body col-md-12"},r.a.createElement("div",{className:"dataTables_wrapper container-fluid dt-bootstrap4 no-footer"},r.a.createElement("div",{className:"row"},r.a.createElement(ye,{handleChange:this.handleChange})),r.a.createElement("div",{className:"row"},null!=this.state.search?this.state.search.length>0?this.state.search.map((function(e){return r.a.createElement(Oe,{item:e,key:e.id})})):r.a.createElement("div",{className:"col-lg-12 center"},r.a.createElement("h2",{className:"text-center text-primary"},"Ничего не найдено :(")):e&&e.length>=1?e.map((function(e){return r.a.createElement(Oe,{deletePage:t.deletePage,item:e,key:e.id})})):null)))))),this.props.loading?r.a.createElement(Se,null):null)}}]),t}(n.Component),je=Object(c.b)((function(e){return{loading:e.fetchPages.loading,pages:e.fetchPages.page.data,pagesLength:e.fetchPages.page.length}}),(function(e){return{fetchParentPageById:function(t,a){return e(function(e,t){return function(a){var n;n=t?"?limit=".concat(t):"?limit=15",a(we()),new Promise((function(e,t){setTimeout((function(){return e()}),100)})).then((function(){R("GET","/api/parentPage/".concat(e).concat(n),null).then((function(e){a(Ne(e))}))}))}}(t,a))},fetchMenuItemsById:function(t){return e(Y(t))},updateMenu:function(t){return e(Z(t))}}}))(ke),Pe=function(e){return r.a.createElement("div",{className:"toggle"},r.a.createElement("label",{className:"control-label"},e.label,e.toggleCheck?e.checked?r.a.createElement("input",{checked:!0,onChange:function(e){},onClick:function(){e.toggleCheck(e.label)},type:"checkbox"}):r.a.createElement("input",{checked:!1,onChange:function(e){},onClick:function(){e.toggleCheck(e.label)},type:"checkbox"}):e.checked?r.a.createElement("input",{checked:!0,onChange:function(e){},onClick:function(){e.toggleCheck(e.label)},type:"checkbox"}):r.a.createElement("input",{checked:!1,onChange:function(e){},type:"checkbox"}),r.a.createElement("span",{className:"button-indecator"})))},Ie=function(e){var t=["form-control"];e.required&&e.isInvalid?t.push("is-invalid"):t=["form-control"];var a=function(t){e.changeInput(e.label,t.target.value)};return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"form-group"},r.a.createElement("label",{className:"control-label"},e.label," ",e.required&&"*"),"Алиас"===e.label?r.a.createElement("input",{type:"text",value:e.value||"",className:t.join(" "),onChange:a.bind(void 0)}):"Заголовок"===e.label?r.a.createElement("input",{type:"text",onBlur:e.blur,value:e.value||"",className:t.join(" "),onChange:a.bind(void 0)}):r.a.createElement("input",{type:"text",value:e.value||"",className:t.join(" "),onChange:a.bind(void 0)}),e.required&&e.isInvalid?r.a.createElement("div",{className:"inputError"},"Поле пустое или заполнено некорректно"):null))},Te=a(38),De=a.n(Te);function Ce(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function _e(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?Ce(Object(a),!0).forEach((function(t){p()(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):Ce(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var Me=function(e){function t(e){var a;return I()(this,t),a=_()(this,x()(t).call(this,e)),p()(A()(a),"getFields",(function(){return a.props.data?a.props.data:{title:"",alias:"",isFolder:!1,isActive:!1}})),p()(A()(a),"blur",(function(e){if(e.target.value&&""!==e.target.value){var t=(new De.a).transform(e.target.value);a.setState({fields:_e({},a.state.fields,{alias:"/"+t.replace(/ /g,"-").toLowerCase()})}),setTimeout((function(){a.props.getData("Алиас","/"+t.replace(/ /g,"-").toLowerCase())}),0)}else null!=a.state&&a.setState({fields:_e({},a.state.fields,{alias:null})})})),p()(A()(a),"toggleCheck",(function(e){switch(e){case"Контейнер":a.setState({fields:_e({},a.state.fields,{isFolder:!a.state.fields.isFolder})}),setTimeout((function(){a.props.getData(e,a.state.fields.isFolder)}),0);break;case"Активность":a.setState({fields:_e({},a.state.fields,{isActive:!a.state.fields.isActive})}),setTimeout((function(){a.props.getData(e,a.state.fields.isActive)}),0)}})),p()(A()(a),"changeInput",(function(e,t){switch(e){case"Заголовок":a.setState({fields:_e({},a.state.fields,{title:t})}),setTimeout((function(){a.props.getData(e,a.state.fields.title)}),0);break;case"Алиас":a.setState({fields:_e({},a.state.fields,{alias:t})}),setTimeout((function(){a.props.getData(e,a.state.fields.alias)}),0)}})),a.state={fields:a.getFields()},a.toggleCheck=a.toggleCheck.bind(A()(a)),a}return U()(t,e),D()(t,[{key:"componentDidUpdate",value:function(e,t){return!(!this.props.data||this.props.data._id==e.data._id||!this.props.data)&&(this.setState({fields:this.props.data}),!0)}},{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"col-md-2"},this.state.fields.isActive?r.a.createElement(Pe,{key:0,checked:!0,toggleCheck:this.toggleCheck,label:"Активность"}):r.a.createElement(Pe,{key:0,toggleCheck:this.toggleCheck,label:"Активность"})),r.a.createElement("div",{className:"col-md-2"},this.state.fields.isFolder?r.a.createElement(Pe,{key:1,checked:!0,toggleCheck:this.toggleCheck,label:"Контейнер"}):r.a.createElement(Pe,{key:1,toggleCheck:this.toggleCheck,label:"Контейнер"})),r.a.createElement("div",{className:"col-md-4"},this.state.fields.title?r.a.createElement(Ie,{key:2,required:!0,changeInput:this.changeInput,label:"Заголовок",value:this.state.fields.title,isInvalid:this.props.isInvalid,blur:this.blur}):r.a.createElement(Ie,{key:2,required:!0,changeInput:this.changeInput,blur:this.blur,label:"Заголовок",isInvalid:this.props.isInvalid,value:this.state.fields.title})),r.a.createElement("div",{className:"col-md-4"},this.state.fields.alias?r.a.createElement(Ie,{key:3,label:"Алиас",changeInput:this.changeInput,value:this.state.fields.alias}):r.a.createElement(Ie,{key:3,label:"Алиас",changeInput:this.changeInput,url:this.state.url})))}}]),t}(r.a.Component),xe=function(e){var t=Object(n.useState)(e.data?e.data.metaTitle:""),a=H()(t,2),l=a[0],i=a[1],s=Object(n.useState)(e.data?e.data.metaKeywords:""),c=H()(s,2),o=c[0],u=c[1],m=Object(n.useState)(e.data?e.data.metaDescription:""),p=H()(m,2),d=p[0],f=p[1];Object(n.useEffect)((function(){e.data&&(e.data.metaTitle&&i(e.data.metaTitle),e.data.metaKeywords&&u(e.data.metaKeywords),e.data.metaDescription&&f(e.data.metaDescription))}));var g=function(t,a){switch(t){case"Title":i(a),setTimeout((function(){e.getData(t,a)}),0);break;case"Keywords":u(a),setTimeout((function(){e.getData(t,a)}),0);break;case"Description":f(a),setTimeout((function(){e.getData(t,a)}),0)}};return r.a.createElement(r.a.Fragment,null,l?r.a.createElement("div",{className:"col-md-4"},r.a.createElement(Ie,{key:1,changeInput:g,value:l,label:"Title"})):r.a.createElement("div",{className:"col-md-4"},r.a.createElement(Ie,{key:1,changeInput:g,label:"Title"})),o?r.a.createElement("div",{className:"col-md-4"},r.a.createElement(Ie,{key:2,changeInput:g,value:o,label:"Keywords"})):r.a.createElement("div",{className:"col-md-4"},r.a.createElement(Ie,{key:2,changeInput:g,label:"Keywords"})),d?r.a.createElement("div",{className:"col-md-4"},r.a.createElement(Ie,{key:3,changeInput:g,value:d,label:"Description"})):r.a.createElement("div",{className:"col-md-4"},r.a.createElement(Ie,{key:3,changeInput:g,label:"Description"})))},Fe=(a(61),a(62),a(64),a(39)),Ae=a.n(Fe),Be=function(e){var t=Object(n.useState)(e.defaultValue),a=H()(t,2),l=a[0],i=a[1],s=Object(n.useState)(e.id),c=H()(s,2),o=c[0],u=c[1];Object(n.useEffect)((function(){e.id!=o&&(u(e.id),i(e.defaultValue))}));return r.a.createElement("div",{className:"col-md-12",id:"editor"},r.a.createElement("label",{className:"control-label"},"Описание"),r.a.createElement(Ae.a,{model:l,tag:"textarea",onModelChange:function(t){!function(t){i(t),e.getFromTextEditor(t)}(t)},config:{imageUploadURL:"/api/upload/image"}}),r.a.createElement("br",null))},Ue=function(e){function t(e){var a;return I()(this,t),a=_()(this,x()(t).call(this,e)),p()(A()(a),"getOptions",(function(){return JSON.parse(localStorage.getItem("options"))})),p()(A()(a),"getData",(function(e,t){switch(e){case"Заголовок":a.setState({title:t});break;case"Алиас":a.setState({alias:t});break;case"Активность":a.setState({active:t});break;case"Контейнер":a.setState({isContainer:t});break;case"Title":a.setState({metaTitle:t});break;case"Keywords":a.setState({metaKeywords:t});break;case"Description":a.setState({metaDescription:t})}})),p()(A()(a),"sendData",(function(){if(null==a.state.title||""==a.state.title)return a.setState({isInvalid:!0}),!1;try{R("POST","/api/parentPage",a.state).then((function(e){200==e.status&&setTimeout((function(){a.props.fetchMenuItemsById(0),a.props.updateMenu(!0)}),0),a.props.history.push("/admin/update/".concat(JSON.parse(e.response).id,"/?create=success"))}))}catch(e){return e}})),p()(A()(a),"getFromTextEditor",(function(e){a.setState({body:e})})),a.state={options:a.getOptions(),active:!1,isContainer:!1,title:null,alias:null,body:null,metaTitle:null,metaKeywords:null,metaDescription:null,isInvalid:!1},a.getOptions=a.getOptions.bind(A()(a)),a}return U()(t,e),D()(t,[{key:"shouldComponentUpdate",value:function(e,t){return t.active!==this.state.active||t.alias!==this.state.alias||t.isContainer!==this.state.isContainer||t.isInvalid!==this.state.isInvalid}},{key:"render",value:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(pe,{title:"Создать новую",classN:"fa-file-text",path:this.state.options.path}),r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-12"},r.a.createElement("div",{className:"tile row"},r.a.createElement("div",{className:"col-md-12 row"},r.a.createElement(Me,{getData:this.getData,isInvalid:this.state.isInvalid}),r.a.createElement(Be,{getFromTextEditor:this.getFromTextEditor}),r.a.createElement(xe,{getData:this.getData}),r.a.createElement("div",{className:"col-md-12"},r.a.createElement("button",{onClick:this.sendData,className:"btn btn-primary pull-right"},"Опубликовать")))))))}}]),t}(r.a.Component),Le=Object(c.b)(null,(function(e){return{fetchMenuItemsById:function(t){return e(Y(t))},updateMenu:function(t){return e(Z(t))}}}))(Ue);function He(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function Re(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?He(Object(a),!0).forEach((function(t){p()(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):He(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var Ge=function(e){function t(e){var a;return I()(this,t),a=_()(this,x()(t).call(this,e)),p()(A()(a),"getData",(function(e,t){switch(e){case"Заголовок":a.setState({fields:Re({},a.state.fields,{title:t})});break;case"Алиас":a.setState({fields:Re({},a.state.fields,{alias:t})});break;case"Активность":a.setState({fields:Re({},a.state.fields,{isActive:t})});break;case"Контейнер":a.setState({fields:Re({},a.state.fields,{isFolder:t})});break;case"Title":a.setState({fields:Re({},a.state.fields,{metaTitle:t})});break;case"Keywords":a.setState({fields:Re({},a.state.fields,{metaKeywords:t})});break;case"Description":a.setState({fields:Re({},a.state.fields,{metaDescription:t})})}})),p()(A()(a),"getFromTextEditor",(function(e){a.setState({fields:Re({},a.state.fields,{body:e})})})),p()(A()(a),"updateData",(function(){if(null==a.state.fields.title||""==a.state.fields.title)return a.setState({isInvalid:!0}),!1;try{R("PUT","/api/parentPage",a.state.fields).then((function(e){200==e.status&&(a.props.fetchMenuItemsById(0),a.props.updateMenu(!0),setTimeout((function(){a.props.fetchPageById(a.props.match.params.id)}),0))}))}catch(e){return e}})),p()(A()(a),"showAlert",(function(){var e=a.props.match.params.id,t=a.context;t.alert.toggleAlert(!0),t.id.setId(e)})),p()(A()(a),"deletePage",function(){var e=ve()(Ee.a.mark((function e(t){return Ee.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,R("DELETE","/api/page/".concat(t),null).then((function(e){return e.status}));case 2:200==e.sent&&(a.props.history.push("/admin/page/0"),setTimeout((function(){a.props.fetchMenuItemsById(0),a.props.updateMenu(!0)}),0));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),a.state={fields:null,isInvalid:!1},a}return U()(t,e),D()(t,[{key:"componentDidMount",value:function(){this.props.fetchPageById(this.props.match.params.id)}},{key:"componentDidUpdate",value:function(e){var t=this.props.match.params.id,a=this.context;return a.delete.isDelete&&a.id.id===t&&(this.deletePage(t),setTimeout((function(){a.delete.deletePage(!1),a.alert.toggleAlert(!1),a.id.setId(null)}),0)),!this.state.fields&&this.props.page.data&&this.setState({fields:this.props.page.data[0]}),!(this.props.match.params.id==e.match.params.id||!this.props.match.params.id)&&(this.props.fetchPageById(this.props.match.params.id),this.forceUpdate(),!0)}},{key:"render",value:function(){var e;return this.state.fields&&(e=this.state.fields),!this.props.loading&&e?r.a.createElement(r.a.Fragment,null,r.a.createElement(pe,{title:this.props.page[0].title,classN:"fa-file-text",path:this.props.page[0].path}),r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-12"},r.a.createElement("div",{className:"tile row"},r.a.createElement("div",{className:"col-md-12 row"},r.a.createElement(Me,{getData:this.getData,isInvalid:this.state.isInvalid,data:e}),r.a.createElement(Be,{getFromTextEditor:this.getFromTextEditor,id:e.id,defaultValue:e.body}),r.a.createElement(xe,{data:e,getData:this.getData}),r.a.createElement("div",{className:"update-page_buttons"},r.a.createElement("button",{onClick:this.showAlert,className:"btn btn-danger"},"Удалить"),r.a.createElement("button",{onClick:this.updateData,className:"btn btn-primary pull-right"},"Обновить"))))))):r.a.createElement(z,null)}}],[{key:"getDerivedStateFromProps",value:function(e,t){return e.page&&e.page[0]&&t.fields&&e.page[0]._id!==t.fields._id?{fields:e.page[0]}:null}}]),t}(r.a.Component);p()(Ge,"contextType",ie);var Je=Object(c.b)((function(e){return{page:e.fetchPages.page,loading:e.fetchPages.loading}}),(function(e){return{fetchPageById:function(t){return e(function(e){return function(t){t(we()),new Promise((function(e,t){setTimeout((function(){return e()}),500)})).then((function(){R("GET","/api/page/".concat(e),null).then((function(e){t(Ne(e))}))}))}}(t))},fetchMenuItemsById:function(t){return e(Y(t))},updateMenu:function(t){return e(Z(t))}}}))(Ge),qe=function(e){var t=Object(n.useState)(e.info),a=H()(t,1)[0],l=e.currentUserId;return r.a.createElement("div",{className:"col-md-4"},r.a.createElement("div",{className:"tile user"},a.profile.avatar?r.a.createElement("img",{src:a.profile.avatar,alt:""}):r.a.createElement("img",{src:"/icons/no-avatar.png",alt:""}),r.a.createElement("h4",null,a.profile.name),a.profile.role&&r.a.createElement("p",null,a.profile.role),l!=a.id&&r.a.createElement("i",{onClick:function(){try{R("DELETE","http://localhost:5000/api/user/deleteUser/".concat(a.id)).then((function(t){200==t.status&&e.fetchUsers()}))}catch(e){}},className:"fa fa-lg fa-trash deleteUser"})))},Ke=function(e){return r.a.createElement("label",{htmlFor:"file-input",className:"btn btn-primary btn-sm file-input"},r.a.createElement("i",{className:"fa fa-upload","aria-hidden":"true"}),"Загрузить",r.a.createElement("input",{name:"avatar",onChange:function(t){var a=t.target.files[0],n=new FormData;n.append("avatar",a),R("POST","/api/upload/avatar",n,!1).then((function(t){e.getAvatar(JSON.parse(t.response).avatar)}))},type:"file"}))};function We(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function Ve(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?We(Object(a),!0).forEach((function(t){p()(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):We(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var Xe=function(e){var t=Object(n.useState)(null),a=H()(t,2),l=a[0],i=a[1],s=Object(n.useState)(null),c=H()(s,2),o=c[0],u=c[1],m=Object(n.useState)(null),p=H()(m,2),d=p[0],f=p[1],g=Object(n.useState)(null),h=H()(g,2),E=h[0],b=h[1],v=Object(n.useState)(null),y=H()(v,2),O=y[0],N=y[1],w=Object(n.useState)({name:!1,login:!1,pass:!1}),S=H()(w,2),k=S[0],j=S[1],P=Object(n.useState)(!1),I=H()(P,2),T=I[0],D=I[1];return r.a.createElement("div",{className:"tile col-md-12"},r.a.createElement("h2",{style:{textAlign:"center"}},"Добавить нового пользователя"),r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-2"},r.a.createElement(Ie,{value:o,required:!0,isInvalid:k.name,changeInput:function(e,t){k.name&&(k.name=!k.name,j(Ve({},k))),u(t)},label:"Имя"})),r.a.createElement("div",{className:"col-md-2"},r.a.createElement(Ie,{value:d,changeInput:function(e,t){f(t)},label:"Роль"})),r.a.createElement("div",{className:"col-md-2"},r.a.createElement(Ie,{value:E,required:!0,isInvalid:k.login,changeInput:function(e,t){k.login&&(k.login=!k.login,j(Ve({},k))),T&&D(!T),b(t)},label:"Логин"})),r.a.createElement("div",{className:"col-md-3"},r.a.createElement(Ie,{value:O,required:!0,isInvalid:k.pass,changeInput:function(e,t){k.pass&&(k.pass=!k.pass,j(Ve({},k))),N(t)},label:"Пароль"})),r.a.createElement("div",{className:"col-md-3 bold avatar"},r.a.createElement("p",null,"Аватар"),l?r.a.createElement("img",{src:l,alt:""}):r.a.createElement(Ke,{getAvatar:function(e){i(e)}})),r.a.createElement("div",{className:"col-md-3"},r.a.createElement("p",null,r.a.createElement("br",null)),r.a.createElement("button",{onClick:function(){(o||(k.name=!0),E||(k.login=!0),O||(k.pass=!0),j(Ve({},k)),Object.values(k).find((function(e){return!0===e})))||R("POST","/api/user/newUser",Ve({},{name:o,role:d,login:E,password:O,avatar:l})).then((function(t){409==t.status&&D(!0),200==t.status&&(i(null),u(null),N(null),f(null),b(null),e.fetchUsers())}))},className:"btn btn-primary"},"Добавить пользователя"),T&&r.a.createElement("div",{style:{position:"initial"},className:"inputError"},"Пользователь с данным логином уже существует"))))},ze=function(e){var t=Object(n.useState)(null),a=H()(t,2),l=a[0],i=a[1],s=Object(n.useState)(null),c=H()(s,2),o=c[0],u=c[1],m=Object(n.useState)(!1),p=H()(m,2),d=p[0],f=p[1],g=G().getUserInfo,h=Object(n.useCallback)((function(){f(!0),R("GET","/api/user/getUsers").then((function(e){i(X()(e)),f(!1)}))}),[]);return Object(n.useEffect)((function(){h()}),[]),Object(n.useEffect)((function(){var e=g();u(e)}),[]),r.a.createElement(r.a.Fragment,null,d?r.a.createElement(z,null):r.a.createElement("div",null,r.a.createElement(pe,ge()({title:"Профиль",classN:"fa-file-text"},e)),r.a.createElement("div",{className:"users row f"},o&&0==o.id?l&&l.map((function(e,t){return r.a.createElement(qe,{fetchUsers:h,currentUserId:o.id,key:t,info:e})})):o&&r.a.createElement(qe,{currentUserId:o.id,info:o}),o&&0==o.id&&r.a.createElement(Xe,{fetchUsers:h}))))},Qe=function(e){return r.a.createElement("div",{className:"authErr bg-danger"},e.message)},Ye=function(e){var t=G().successLogin,a=Object(n.useState)(""),l=H()(a,2),i=l[0],s=l[1],c=Object(n.useState)(""),o=H()(c,2),u=o[0],m=o[1],p=Object(n.useState)(null),d=H()(p,2),f=d[0],g=d[1],h=Object(n.useState)(!1),E=H()(h,2),b=E[0],v=E[1];return r.a.createElement(r.a.Fragment,null,r.a.createElement("section",{className:"material-half-bg"},r.a.createElement("div",{className:"cover"})),r.a.createElement("section",{className:"login-content"},r.a.createElement("div",{className:"login-box"},r.a.createElement("form",{className:"login-form"},r.a.createElement("h3",{className:"login-head"},r.a.createElement("i",{className:"fa fa-lg fa-fw fa-user"}),"Авторизация"),r.a.createElement("div",{className:"form-group"},r.a.createElement(Ie,{value:i,changeInput:function(e,t){s(t)},label:"Логин"})),r.a.createElement("div",{className:"form-group secure-field"},r.a.createElement(Ie,{label:"Пароль",value:u,changeInput:function(e,t){m(t)}})),r.a.createElement("div",{className:"form-group btn-container"},r.a.createElement("button",{className:"btn btn-primary btn-block",onClick:function(e){e.preventDefault(),0!=i.length&&0!=u.length?(v(!0),R("POST","/api/user/",{login:i,password:u}).then((function(e){if(400==e.status&&(v(!1),g("Пользователь с такими данными не найден")),200==e.status){var a=JSON.parse(e.response);v(!1),t(a)}}))):g("Проверьте введенные данные")}},r.a.createElement("i",{className:"fa fa-sign-in fa-lg fa-fw"}),"Вход")),f&&r.a.createElement(Qe,{message:f})))),b&&r.a.createElement(Se,null))},Ze=function(e){return r.a.createElement(r.a.Fragment,null,e.isAuth?r.a.createElement(j.c,null,r.a.createElement(j.a,{path:"/admin/",exact:!0,component:de}),r.a.createElement(j.a,{path:"/admin/create",component:Le}),r.a.createElement(j.a,{path:"/admin/update/:id/",component:Je}),r.a.createElement(j.a,{path:"/admin/page/:ids",component:je}),r.a.createElement(j.a,{path:"/admin/user",component:ze})):r.a.createElement(j.c,null,r.a.createElement(j.a,{path:"/admin/login",component:Ye})))},$e=Object(j.g)((function(e){var t=G().isAuth;return r.a.createElement(r.a.Fragment,null,t?r.a.createElement(ue,null,r.a.createElement(Ze,{isAuth:t})):r.a.createElement(Ze,{isAuth:t}))})),et=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||o.d,tt=Object(o.e)(k,et(Object(o.a)(u.a))),at=r.a.createElement(c.a,{store:tt},r.a.createElement(s.a,null,r.a.createElement($e,null)));i.a.render(at,document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,